import logging
import sys
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.helpers import mention_html
import re
import pytz
import os
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7384921058:AAEcDrQbW0kcQwceYDH4inZGq15Wtu-c9hE")
KYRGYZSTAN_TZ = pytz.timezone("Asia/Bishkek")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
group_settings = {}
group_users = {}
waiting_for_time = set()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    user_id = update.effective_user.id
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—É.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    group_settings[chat_id] = {
        "subscribed": True,
        "hour": 21,
        "minute": 0,
        "last_sent_date": None
    }
    group_users[chat_id] = set()
    
    await update.message.reply_text(
        "üíú –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–Ø ‚Äî ü§ñ –±–æ—Ç Envio ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ—Ç –∫—É—Ä—Å–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ Envio.\n"
        "üìå –ú–æ—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–∞—à –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –≤—Å—ë –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º!\n"
        "–ù–∞–∂–º–∏—Ç–µ /join —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
    )

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in group_settings or not group_settings[chat_id]["subscribed"]:
        await update.message.reply_text("‚ùó–ì—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if chat_id not in group_users:
        group_users[chat_id] = set()

    group_users[chat_id].add(user.id)
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –≤ —á–∞—Ç {chat_id}")
    
    username_text = f"‚úÖ –í–∞—à username: @{user.username}" if user.username else "‚ùó –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username!"
    await update.message.reply_text(f"üëã {user.full_name}, –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n{username_text}")

async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in group_settings:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    user_id = update.effective_user.id
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è.")
            return
    except Exception:
        return

    waiting_for_time.add(chat_id)
    now = datetime.now(KYRGYZSTAN_TZ)
    current = group_settings[chat_id]
    await update.message.reply_text(
        f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {current['hour']:02d}:{current['minute']:02d}\n"
        f"üïê –°–µ–π—á–∞—Å: {now.strftime('%H:%M')}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 06:30)"
    )

async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message_text = update.message.text.strip()

    if message_text.startswith("/") or chat_id not in waiting_for_time:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    match = re.match(pattern, message_text)
    
    if match:
        hour, minute = int(match.group(1)), int(match.group(2))
        group_settings[chat_id]["hour"] = hour
        group_settings[chat_id]["minute"] = minute
        waiting_for_time.discard(chat_id)
        
        await update.message.reply_text(
            f"‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}!"
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00)"
        )

async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(KYRGYZSTAN_TZ)
    today_str = now.strftime("%Y-%m-%d")
    hour, minute = now.hour, now.minute

    for chat_id, settings in list(group_settings.items()):
        if (settings["subscribed"] and 
            settings["hour"] == hour and 
            settings["minute"] == minute and
            settings.get("last_sent_date") != today_str):
            
            try:
                mentions = []
                for user_id in group_users.get(chat_id, []):
                    try:
                        member = await context.bot.get_chat_member(chat_id, user_id)
                        user = member.user
                        if user.username:
                            mentions.append(f"@{user.username}")
                        else:
                            mentions.append(mention_html(user.id, user.full_name))
                    except Exception:
                        continue

                mention_text = " ".join(mentions)
                message = (
                    f"{mention_text}\n\n"
                    f"–í—Å–µ–º –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü\n"
                    f"–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ:\n"
                    f"‚úÖ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ Duolingo –∏ Polyglot\n"
                    f"‚úÖ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏.\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å! –ñ–¥—É –≤–∞—à–∏ –æ—Ç—á—ë—Ç—ã. üòä"
                )

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode=ParseMode.HTML
                )

                group_settings[chat_id]["last_sent_date"] = today_str
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now = datetime.now(KYRGYZSTAN_TZ)
    total = len([s for s in group_settings.values() if s["subscribed"]])
    
    msg = f"üìä –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø: {total}\nüïí –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S')}"
    if chat_id in group_settings:
        s = group_settings[chat_id]
        msg += f"\n‚è∞ –í—Ä–µ–º—è: {s['hour']:02d}:{s['minute']:02d}"
        msg += f"\nüë• –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö: {len(group_users.get(chat_id, []))}"
    
    await update.message.reply_text(msg)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/join ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/time ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("join", join))
        app.add_handler(CommandHandler("time", time_command))
        app.add_handler(CommandHandler("status", status))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(MessageHandler(filters.TEXT, handle_time_input))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        if app.job_queue:
            app.job_queue.run_repeating(send_daily_message, interval=60, first=10)
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return

if __name__ == "__main__":
    main()