import asyncio
import logging
import sys
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode
from telegram.helpers import mention_html
from telegram.error import NetworkError, TelegramError
import re
import pytz
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

KYRGYZSTAN_TZ = pytz.timezone("Asia/Bishkek")

group_settings = {}
group_users = {}  # chat_id: set(user_ids)
waiting_for_time = set()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    user_id = update.effective_user.id
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—É.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤.")
        return

    group_settings[chat_id] = {
        "subscribed": True,
        "hour": 21,
        "minute": 0,
        "last_sent_date": None
    }
    group_users[chat_id] = set()
    await update.message.reply_text(
        "üíú –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–Ø ‚Äî ü§ñ –±–æ—Ç Envio ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ—Ç –∫—É—Ä—Å–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ Envio.\n"
        "üìå –ú–æ—è –∑–∞–¥–∞—á–∞: –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–∞—à –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –≤—Å—ë –ª—É—á—à–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º!\n"
        "–ù–∞–∂–º–∏—Ç–µ /join —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
    )

# /join
async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in group_settings or not group_settings[chat_id]["subscribed"]:
        await update.message.reply_text("‚ùó–ì—Ä—É–ø–ø–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if chat_id not in group_users:
        group_users[chat_id] = set()

    group_users[chat_id].add(user.id)
    logger.info(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω: {user.full_name} (ID: {user.id}, @username: {user.username}) –≤ —á–∞—Ç {chat_id}")
    await update.message.reply_text(
        f"üëã {user.full_name}, –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n"
        f"‚úÖ –í–∞—à username: @{user.username}" if user.username else "‚ùó –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username!"
    )

# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    if chat_id in group_settings:
        group_settings[chat_id]["subscribed"] = False
    waiting_for_time.discard(chat_id)
    await update.message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

# /time
async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if chat_id not in group_settings:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    waiting_for_time.add(chat_id)
    now = datetime.now(KYRGYZSTAN_TZ)
    current = group_settings[chat_id]
    await update.message.reply_text(
        f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {current['hour']:02d}:{current['minute']:02d}\n"
        f"üïê –°–µ–π—á–∞—Å: {now.strftime('%H:%M')}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 06:30)"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
def validate_time_input(time_str):
    pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    match = re.match(pattern, time_str)
    if not match:
        return False, None, None, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"
    return True, int(match.group(1)), int(match.group(2)), "OK"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message_text = update.message.text.strip()

    if message_text.startswith("/") or chat_id not in waiting_for_time:
        return

    user_id = update.effective_user.id
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        return

    is_valid, hour, minute, error_msg = validate_time_input(message_text)

    if is_valid:
        group_settings[chat_id]["hour"] = hour
        group_settings[chat_id]["minute"] = minute
        waiting_for_time.discard(chat_id)

        now = datetime.now(KYRGYZSTAN_TZ)
        target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if target_time <= now:
            target_time += timedelta(days=1)
        delta = target_time - now

        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d} ‚è∞\n\n"
            f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {delta.seconds // 3600} —á. {(delta.seconds % 3600) // 60} –º–∏–Ω.\n\n"
            f"üí¨ –Ø –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ—á–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {error_msg}\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00, 21:45)"
        )

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(KYRGYZSTAN_TZ)
    today_str = now.strftime("%Y-%m-%d")
    hour, minute = now.hour, now.minute

    for chat_id, settings in list(group_settings.items()):
        if (settings["subscribed"]
            and settings["hour"] == hour
            and settings["minute"] == minute
            and settings.get("last_sent_date") != today_str):

            try:
                mentions = []
                logger.info(f"üîç –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç–µ {chat_id}: {group_users.get(chat_id)}")

                for user_id in group_users.get(chat_id, []):
                    try:
                        member = await context.bot.get_chat_member(chat_id, user_id)
                        user = member.user
                        if user.username:
                            mentions.append(f"@{user.username}")
                        else:
                            mentions.append(mention_html(user.id, user.full_name))
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {user_id}: {e}")

                mention_text = " ".join(mentions)
                logger.info(f"üì£ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {mention_text}")

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=(
                        f"{mention_text}\n\n"
                        f"–í—Å–µ–º –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ:\n"
                        f"‚úÖ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ Duolingo –∏ Polyglot\n"
                        f"‚úÖ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏.\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å! –ñ–¥—É –≤–∞—à–∏ –æ—Ç—á—ë—Ç—ã. üòä"
                    ),
                    parse_mode=ParseMode.HTML
                )

                group_settings[chat_id]["last_sent_date"] = today_str
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")
                if "bot was kicked" in str(e).lower() or "chat not found" in str(e).lower():
                    logger.info(f"–£–¥–∞–ª—è–µ–º —á–∞—Ç {chat_id} –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                    if chat_id in group_settings:
                        del group_settings[chat_id]
                    if chat_id in group_users:
                        del group_users[chat_id]

# /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now = datetime.now(KYRGYZSTAN_TZ)
    total = len([s for s in group_settings.values() if s["subscribed"]])
    msg = f"üìä –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø: {total}\nüïí –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S')}"
    if chat_id in group_settings:
        s = group_settings[chat_id]
        msg += f"\n‚è∞ –í—Ä–µ–º—è: {s['hour']:02d}:{s['minute']:02d}"
        msg += f"\nüë• –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö: {len(group_users.get(chat_id, []))}"
    await update.message.reply_text(msg)

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/join ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/time ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JobQueue
        if application.job_queue is None:
            logger.error("‚ùå JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            sys.exit(1)
        
        logger.info("‚úÖ JobQueue —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ job queue
        job_queue = application.job_queue
        job_queue.run_repeating(send_daily_message, interval=60, first=10)
        logger.info("‚úÖ –ó–∞–¥–∞—á–∞ send_daily_message –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("join", join))
        application.add_handler(CommandHandler("stop", stop))
        application.add_handler(CommandHandler("time", time_command))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT, handle_time_input))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except NetworkError as e:
        logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    except TelegramError as e:
        logger.error(f"üì± –û—à–∏–±–∫–∞ Telegram API: {e}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()