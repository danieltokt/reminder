import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import re
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "7384921058:AAEcDrQbW0kcQwceYDH4inZGq15Wtu-c9hE"
KYRGYZSTAN_TZ = pytz.timezone("Asia/Bishkek")

group_settings = {}
waiting_for_time = set()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    user_id = update.effective_user.id
    chat_member = await context.bot.get_chat_member(chat_id, user_id)
    if chat_member.status not in ['administrator', 'creator']:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—É.")
        return

    group_settings[chat_id] = {
        "subscribed": True,
        "hour": 21,
        "minute": 0,
        "last_sent_date": None
    }
    await update.message.reply_text(
        "‚úÖ –ì—Ä—É–ø–ø–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n"
        "‚è∞ –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 21:00\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚è∞ /time - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        "üõë /stop - –æ—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
        "‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    chat_member = await context.bot.get_chat_member(chat_id, user_id)
    if chat_member.status not in ['administrator', 'creator']:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É.")
        return

    group_settings[chat_id]["subscribed"] = False
    waiting_for_time.discard(chat_id)
    await update.message.reply_text("‚ùå –ì—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

# /time
async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if chat_id not in group_settings:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é /start")
        return

    chat_member = await context.bot.get_chat_member(chat_id, user_id)
    if chat_member.status not in ['administrator', 'creator']:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è.")
        return

    waiting_for_time.add(chat_id)
    now = datetime.now(KYRGYZSTAN_TZ)
    current = group_settings[chat_id]
    await update.message.reply_text(
        f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {current['hour']:02d}:{current['minute']:02d}\n"
        f"üïê –°–µ–π—á–∞—Å: {now.strftime('%H:%M')}\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 06:30)"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
def validate_time_input(time_str):
    pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    match = re.match(pattern, time_str)
    if not match:
        return False, None, None, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"
    return True, int(match.group(1)), int(match.group(2)), "OK"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    message_text = update.message.text.strip()

    if message_text.startswith("/") or chat_id not in waiting_for_time:
        return

    user_id = update.effective_user.id
    chat_member = await context.bot.get_chat_member(chat_id, user_id)
    if chat_member.status not in ['administrator', 'creator']:
        return

    is_valid, hour, minute, error_msg = validate_time_input(message_text)

    if is_valid:
        group_settings[chat_id]["hour"] = hour
        group_settings[chat_id]["minute"] = minute
        waiting_for_time.discard(chat_id)

        now = datetime.now(KYRGYZSTAN_TZ)
        target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        if target_time <= now:
            target_time += timedelta(days=1)
        delta = target_time - now

        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d} ‚è∞\n\n"
            f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {delta.seconds // 3600} —á. {(delta.seconds % 3600) // 60} –º–∏–Ω.\n\n"
            f"üí¨ –Ø –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ—á–Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {error_msg}\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00, 21:45)"
        )

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_daily_message(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(KYRGYZSTAN_TZ)
    today_str = now.strftime("%Y-%m-%d")
    hour, minute = now.hour, now.minute

    for chat_id, settings in list(group_settings.items()):
        if (settings["subscribed"]
            and settings["hour"] == hour
            and settings["minute"] == minute
            and settings.get("last_sent_date") != today_str):
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=(
                        f"–í—Å–µ–º –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü\n"
                        f"–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ:\n"
                        f"‚úÖ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ Duolingo –∏ Polyglot\n"
                        f"‚úÖ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏.\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å! –ñ–¥—É –≤–∞—à–∏ –æ—Ç—á—ë—Ç—ã. üòä\n"
                    )
                )
                group_settings[chat_id]["last_sent_date"] = today_str
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")
                if "bot was kicked" in str(e).lower():
                    del group_settings[chat_id]

# /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now = datetime.now(KYRGYZSTAN_TZ)
    total = len([s for s in group_settings.values() if s["subscribed"]])
    msg = f"üìä –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø: {total}\nüïí –°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S')}"
    if chat_id in group_settings:
        s = group_settings[chat_id]
        msg += f"\n‚è∞ –í—Ä–µ–º—è: {s['hour']:02d}:{s['minute']:02d}"
    await update.message.reply_text(msg)

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É\n"
        "/time ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

# –ó–∞–ø—É—Å–∫
from telegram.ext import Application, ApplicationBuilder, JobQueue

async def setup_jobqueue(app):
    job_queue = app.job_queue
    job_queue.run_repeating(send_daily_message, interval=30, first=0)

def main():
    application = Application.builder().token(BOT_TOKEN).post_init(setup_jobqueue).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("time", time_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT, handle_time_input))

    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∏ —Å–ª—É—à–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    application.run_polling()

if __name__ == "__main__":
    main()
